#!/usr/bin/env python3
"""
ConCure License Generator (Ed25519)

Creates a signed .concurelic license file.

Usage:
  python license_generator.py create \
      --customer "Acme Clinic" \
      --edition premium \
      --features patient_management appointments reports \
      --days 15 \
      --bind-machine <HARDWARE_FINGERPRINT> \
      --out AcmeClinic.concurelic

Prerequisites:
  pip install pynacl

Generate a key pair once and keep the private key safe:
  python license_generator.py gen-key --out private_key.pem --pub public_key.pem

"""
import argparse
import base64
import json
import os
from datetime import datetime, timedelta, timezone

try:
    from nacl.signing import SigningKey
    from nacl.encoding import RawEncoder
except Exception as e:
    print("Please install pynacl: pip install pynacl")
    raise


def cmd_gen_key(args):
    sk = SigningKey.generate()
    pk = sk.verify_key
    # Save private key (raw 32 bytes) and public key as PEM-like text blocks
    with open(args.out, 'wb') as f:
        f.write(sk.encode(RawEncoder))
    pub_path = args.pub or (os.path.splitext(args.out)[0] + '.pub')
    with open(pub_path, 'wb') as f:
        f.write(pk.encode(RawEncoder))
    print(f"Generated private key: {args.out}\nPublic key: {pub_path}")


def load_private_key(path):
    with open(path, 'rb') as f:
        raw = f.read()
    return SigningKey(raw, encoder=RawEncoder)


def cmd_create(args):
    sk = load_private_key(args.key)

    now = datetime.now(timezone.utc)
    expires_at = now + timedelta(days=args.days)

    payload = {
        "edition": args.edition,
        "features": args.features or [],
        "customer": {
            "name": args.customer,
            "email": args.email,
            "id": args.customer_id
        },
        # Optional machine binding
        **({"hardwareFingerprint": args.bind_machine} if args.bind_machine else {}),
        # Time-limited license
        "expiresAt": expires_at.isoformat()
    }

    payload_bytes = json.dumps(payload, separators=(',', ':')).encode('utf-8')
    signed = sk.sign(payload_bytes, encoder=RawEncoder)
    signature = signed.signature  # 64 bytes

    license_file = {
        "payload": base64.b64encode(payload_bytes).decode('ascii'),
        "signature": base64.b64encode(signature).decode('ascii')
    }

    out_path = args.out or 'license.concurelic'
    with open(out_path, 'w', encoding='utf-8') as f:
        json.dump(license_file, f)
    print(f"Wrote {out_path}\nExpires: {expires_at.isoformat()}")


def main():
    p = argparse.ArgumentParser(description='ConCure License Generator (Ed25519)')
    sub = p.add_subparsers(dest='cmd', required=True)

    p_gen = sub.add_parser('gen-key', help='Generate Ed25519 key pair')
    p_gen.add_argument('--out', required=True, help='Private key file path')
    p_gen.add_argument('--pub', help='Public key output path (optional)')
    p_gen.set_defaults(func=cmd_gen_key)

    p_create = sub.add_parser('create', help='Create a signed license file (.concurelic)')
    p_create.add_argument('--key', required=True, help='Private key file (generated by gen-key)')
    p_create.add_argument('--customer', required=True)
    p_create.add_argument('--customer-id', default='')
    p_create.add_argument('--email', default='')
    p_create.add_argument('--edition', choices=['standard','premium','enterprise'], default='standard')
    p_create.add_argument('--features', nargs='*', default=[])
    p_create.add_argument('--days', type=int, default=15, help='Days until expiry (default 15)')
    p_create.add_argument('--bind-machine', dest='bind_machine', help='Hardware fingerprint to bind (optional)')
    p_create.add_argument('--out', help='Output .concurelic path')
    p_create.set_defaults(func=cmd_create)

    args = p.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()

